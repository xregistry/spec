{
  "openapi": "3.0.3",
  "info": {
    "title": "xRegistry API",
    "description": "xRegistry API",
    "version": "0.5-wip"
  },
  "servers": [],
  "security": [
    {
      "api_key": []
    }
  ],
  "paths": {
    "/": {
      "get": {
        "operationId": "getRootDocument",
        "description": "Gets the root document",
        "parameters": [
          {
            "in": "query",
            "name": "inline",
            "description": "Set if references shall be inlined",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filter criterion(s)",
            "explode": true,
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The root document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "upsertDocument",
        "description": "Uploads a registry document and upserts its contents into the registry",
        "requestBody": {
          "description": "A request to create or update the discovery endpoint's collection of endpoints with the given endpoints",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/document"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The resulting document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            }
          }
        }
      }
    },
    "/messagegroups/{groupid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        }
      ],
      "get": {
        "operationId": "getMessagegroup",
        "responses": {
          "200": {
            "description": "The resource group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/messagegroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be updated",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "operationId": "putMessagegroup",
        "description": "creates or updates the resource group",
        "requestBody": {
          "description": "A request to create or update the discovery group's collection of groups with the given group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/messagegroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/messagegroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "operationId": "deleteMessagegroup",
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/messagegroups/{groupid}/messages": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        }
      ],
      "get": {
        "operationId": "getMessagegroupMessagesAll",
        "description": "Get an optionally filtered collection of resources",
        "parameters": [
          {
            "in": "query",
            "name": "inline",
            "description": "Set if references shall be inlined",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The number of resources to skip",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "top",
            "description": "The number of resources to show",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filter criterion(s)",
            "explode": true,
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated list of resources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/message"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/messagegroups/{groupid}/messages/{resourceid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        },
        {
          "$ref": "#/components/parameters/resourceid"
        },
        {
          "in": "query",
          "name": "meta",
          "description": "Interact with the metadata",
          "required": false,
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "get": {
        "operationId": "getMessagegroupMessage",
        "responses": {
          "200": {
            "description": "The corresponding resource",
            "headers": {
              "resource-id": {
                "$ref": "#/components/headers/resource-id"
              },
              "resource-version": {
                "$ref": "#/components/headers/resource-version"
              },
              "resource-name": {
                "$ref": "#/components/headers/resource-name"
              },
              "resource-self": {
                "$ref": "#/components/headers/resource-self"
              },
              "resource-description": {
                "$ref": "#/components/headers/resource-description"
              },
              "resource-documentation": {
                "$ref": "#/components/headers/resource-documentation"
              },
              "resource-labels": {
                "$ref": "#/components/headers/resource-labels"
              },
              "resource-createdat": {
                "$ref": "#/components/headers/resource-createdat"
              },
              "resource-modifiedat": {
                "$ref": "#/components/headers/resource-modifiedat"
              },
              "Content-Location": {
                "description": "permalink location of the returned version",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be upserted",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/resource-description"
          },
          {
            "$ref": "#/components/parameters/resource-documentation"
          },
          {
            "$ref": "#/components/parameters/resource-labels"
          }
        ],
        "summary": "Create or update a resource",
        "description": "Create a resource. ",
        "operationId": "putMessagegroupMessage",
        "requestBody": {
          "description": "The resource to be created/updated",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "post": {
        "summary": "Post new resource version",
        "description": "Register resource version If resource of specified name does not exist in specified group, resource and resource version is created at version 1. If resource of specified name exists already in specified group, resource is created at latest version + 1. If resource with identical content already exists, existing resource's ID is returned. \n",
        "operationId": "postMessagegroupMessage",
        "parameters": [
          {
            "$ref": "#/components/parameters/resource-description"
          },
          {
            "$ref": "#/components/parameters/resource-documentation"
          },
          {
            "$ref": "#/components/parameters/resource-labels"
          },
          {
            "in": "header",
            "description": "format",
            "name": "format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A request to add a new resource to the version collection",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created resource",
            "headers": {
              "resource-id": {
                "$ref": "#/components/headers/resource-id"
              },
              "resource-version": {
                "$ref": "#/components/headers/resource-version"
              },
              "resource-name": {
                "$ref": "#/components/headers/resource-name"
              },
              "resource-self": {
                "$ref": "#/components/headers/resource-self"
              },
              "resource-description": {
                "$ref": "#/components/headers/resource-description"
              },
              "resource-documentation": {
                "$ref": "#/components/headers/resource-documentation"
              },
              "resource-labels": {
                "$ref": "#/components/headers/resource-labels"
              },
              "resource-createdat": {
                "$ref": "#/components/headers/resource-createdat"
              },
              "resource-modifiedat": {
                "$ref": "#/components/headers/resource-modifiedat"
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "summary": "Delete resource",
        "description": "Delete resource",
        "operationId": "deleteMessagegroupMessage",
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/messagegroups/{groupid}/messages/{resourceid}/versions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        },
        {
          "$ref": "#/components/parameters/resourceid"
        }
      ],
      "get": {
        "operationId": "getMessagegroupMessageVersionsAll",
        "description": "Get an optionally filtered collection of versions",
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "The number of resources to skip",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "top",
            "description": "The number of resources to show",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filter criterion(s)",
            "explode": true,
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated list of versions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/message"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/messagegroups/{groupid}/messages/{resourceid}/versions/{versionid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        },
        {
          "$ref": "#/components/parameters/resourceid"
        },
        {
          "$ref": "#/components/parameters/versionid"
        },
        {
          "in": "query",
          "name": "meta",
          "description": "Interact with the metadata",
          "required": false,
          "allowEmptyValue": true,
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "get": {
        "operationId": "getMessagegroupMessageVersion",
        "description": "Gets the document stored for the schema version",
        "responses": {
          "200": {
            "description": "The schema version document",
            "headers": {
              "resource-id": {
                "$ref": "#/components/headers/resource-id"
              },
              "resource-version": {
                "$ref": "#/components/headers/resource-version"
              },
              "resource-name": {
                "$ref": "#/components/headers/resource-name"
              },
              "resource-self": {
                "$ref": "#/components/headers/resource-self"
              },
              "resource-description": {
                "$ref": "#/components/headers/resource-description"
              },
              "resource-documentation": {
                "$ref": "#/components/headers/resource-documentation"
              },
              "resource-labels": {
                "$ref": "#/components/headers/resource-labels"
              },
              "resource-createdat": {
                "$ref": "#/components/headers/resource-createdat"
              },
              "resource-modifiedat": {
                "$ref": "#/components/headers/resource-modifiedat"
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "operationId": "updateMessagegroupMessageVersion",
        "description": "Updates the metadata for the schema version",
        "requestBody": {
          "description": "The schema version document",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The schema version metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be deleted",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "operationId": "deleteMessagegroupMessageVersion",
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "code",
        "in": "query"
      }
    },
    "parameters": {
      "groupType": {
        "in": "path",
        "name": "groupType",
        "description": "The groupType (plural)",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "resourceType": {
        "in": "path",
        "name": "resourceType",
        "description": "The resourceType (plural)",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "endpointid": {
        "in": "path",
        "name": "endpointid",
        "description": "The id of the endpoint",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier",
          "format": "uri-reference"
        }
      },
      "groupid": {
        "in": "path",
        "name": "groupid",
        "description": "The id of the group",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier",
          "format": "uri-reference"
        }
      },
      "resourceid": {
        "in": "path",
        "name": "resourceid",
        "description": "The id of the schema",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier",
          "format": "uri-reference"
        }
      },
      "versionid": {
        "in": "path",
        "name": "versionid",
        "description": "The id of the schema",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier",
          "format": "uri-reference"
        }
      },
      "resource-type": {
        "in": "header",
        "name": "resource-type",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "resource-id": {
        "in": "header",
        "name": "resource-id",
        "required": false,
        "description": "A unique identifier for this resource. This value MUST be globally unique",
        "schema": {
          "type": "string",
          "format": "uri-reference"
        }
      },
      "resource-version": {
        "in": "header",
        "name": "resource-version",
        "required": false,
        "description": "A number representing the version number of the resource.",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "resource-self": {
        "in": "header",
        "name": "resource-self",
        "required": false,
        "description": "A unique URI for the resource.",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "resource-description": {
        "in": "header",
        "name": "resource-description",
        "required": false,
        "description": "A summary of the purpose of the resource.",
        "schema": {
          "type": "string"
        }
      },
      "resource-name": {
        "in": "header",
        "name": "resource-name",
        "required": false,
        "description": "The name of the resource.",
        "schema": {
          "type": "string"
        }
      },
      "resource-documentation": {
        "in": "header",
        "required": false,
        "name": "resource-documentation",
        "description": "Absolute URL that provides a link to additional documentation about the resource.",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "resource-labels": {
        "in": "header",
        "name": "resource-labels",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/resource-labels"
          }
        }
      },
      "resource-createdat": {
        "in": "header",
        "name": "resource-createdat",
        "required": false,
        "description": "Time when this entity was created",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "resource-modifiedat": {
        "in": "header",
        "name": "resource-modifiedat",
        "required": false,
        "description": "Time when this entity was last modified",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "headers": {
      "resource-type": {
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "resource-id": {
        "required": false,
        "description": "A unique identifier for this Endpoint. This value MUST be globally unique",
        "schema": {
          "type": "string",
          "format": "uri-reference"
        }
      },
      "resource-version": {
        "required": false,
        "description": "A number representing the version number of the resource.",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "resource-self": {
        "required": false,
        "description": "A unique URI for the resource. The URI MUST be a combination of the  base URI of the list of this resource type for the current Discovery  Service appended with the `id` of this resource.\n",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "resource-description": {
        "required": false,
        "description": "A summary of the purpose of the resource.",
        "schema": {
          "type": "string"
        }
      },
      "resource-name": {
        "required": false,
        "description": "The name of the resource.",
        "schema": {
          "type": "string"
        }
      },
      "resource-documentation": {
        "description": "Absolute URL that provides a link to additional documentation about the resource.",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "resource-labels": {
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/resource-labels"
          }
        }
      },
      "resource-createdat": {
        "required": false,
        "description": "Time when this entity was created",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "resource-modifiedat": {
        "required": false,
        "description": "Time when this entity was last modified",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "schemas": {
      "resource-labels": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "document": {
        "type": "object",
        "properties": {
          "messagegroups": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/messagegroup"
            }
          }
        }
      },
      "envelope_None": {
        "properties": {
          "envelope": {
            "type": "string",
            "description": "Message envelope format identifier. This attribute MUST be the same as the 'envelope' attribute of the definition group, but is not automatically inherited because definitions may be cross-referenced across groups",
            "enum": [
              "None"
            ],
            "default": "None"
          }
        }
      },
      "envelope_CloudEvents_1_0": {
        "properties": {
          "envelope": {
            "type": "string",
            "description": "Message envelope format identifier. This attribute MUST be the same as the 'envelope' attribute of the definition group, but is not automatically inherited because definitions may be cross-referenced across groups",
            "enum": [
              "CloudEvents/1.0"
            ]
          },
          "envelopemetadata": {
            "type": "object",
            "description": "CloudEvents metadata constraints",
            "properties": {
              "specversion": {
                "type": "object",
                "description": "CloudEvents spec version",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "CloudEvents spec version"
                  },
                  "required": {
                    "type": "boolean"
                  }
                }
              },
              "id": {
                "type": "object",
                "description": "CloudEvents id",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "CloudEvents id value template"
                  },
                  "required": {
                    "type": "boolean"
                  }
                }
              },
              "type": {
                "type": "object",
                "description": "CloudEvents type",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "CloudEvents type value template"
                  },
                  "required": {
                    "type": "boolean"
                  }
                }
              },
              "source": {
                "type": "object",
                "description": "CloudEvents source",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "CloudEvents source value template"
                  },
                  "required": {
                    "type": "boolean"
                  }
                }
              },
              "subject": {
                "type": "object",
                "description": "CloudEvents subject",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "CloudEvents subject value template"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "CloudEvents subject required"
                  }
                }
              },
              "time": {
                "type": "object",
                "description": "The timestamp of when the event happened",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "The timestamp value template"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "The timestamp required"
                  }
                }
              },
              "dataschema": {
                "type": "object",
                "description": "The uri of the schema that the event payload adheres to. If the dataschema attribute is not present, it MUST be interpreted as no schema. An application MAY assign a meaning to the dataschema attribute if it is not present by default",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "format": "uri-template",
                    "description": "The uri value template"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "The uri required"
                  }
                }
              }
            },
            "additionalProperties": {
              "type": "object",
              "description": "CloudEvent extension property",
              "properties": {
                "description": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "description": "The value type"
                },
                "value": {
                  "type": "string",
                  "description": "The value template"
                },
                "required": {
                  "type": "boolean",
                  "description": "Whether the extension is required"
                }
              }
            }
          },
          "envelopeoptions": {
            "type": "object",
            "description": "Envelope metadata constraints",
            "properties": {
              "mode": {
                "type": "string",
                "description": "Whether CloudEvents 'binary' or 'structure' mode will be used"
              },
              "format": {
                "type": "string",
                "description": "The media type format used to serialize the CloudEvent in the case of mode=structured"
              }
            }
          }
        },
        "required": [
          "envelope"
        ]
      },
      "protocol_None": {
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Protocol identifier. This attribute MUST be the same as the 'protocol' attribute of the definition group, but is not automatically inherited because definitions may be cross-referenced across groups",
            "enum": [
              "None"
            ],
            "default": "None"
          }
        }
      },
      "protocol_AMQP_1_0": {
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Protocol identifier. This attribute MUST be the same as the 'protocol' attribute of the definition group, but is not automatically inherited because definitions may be cross-referenced across groups",
            "enum": [
              "AMQP/1.0"
            ]
          },
          "protocoloptions": {
            "type": "object",
            "description": "AMQP message metadata constraints",
            "properties": {
              "properties": {
                "type": "object",
                "properties": {
                  "message_id": {
                    "type": "object",
                    "description": "AMQP message-id",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP message-id value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP message-id value template"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP message-id required"
                      }
                    }
                  },
                  "user_id": {
                    "type": "object",
                    "description": "AMQP user-id",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP user-id value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP user-id value template"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP user-id required"
                      }
                    }
                  },
                  "to": {
                    "type": "object",
                    "description": "AMQP to",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP to value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP to value template"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP to required"
                      }
                    }
                  },
                  "subject": {
                    "type": "object",
                    "description": "AMQP subject",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP subject value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP subject value template"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP subject required"
                      }
                    }
                  },
                  "reply_to": {
                    "type": "object",
                    "description": "AMQP reply-to",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP reply-to value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP reply-to value template"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP reply-to required"
                      }
                    }
                  },
                  "correlation_id": {
                    "type": "object",
                    "description": "AMQP correlation-id",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP correlation-id value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP correlation-id value template"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP correlation-id required"
                      }
                    }
                  },
                  "content_type": {
                    "type": "object",
                    "description": "AMQP content-type",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP content-type value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP content-type value template"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP content-type required"
                      }
                    }
                  },
                  "content_encoding": {
                    "type": "object",
                    "description": "AMQP content-encoding",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP content-encoding value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP content-encoding value template"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP content-encoding required"
                      }
                    }
                  },
                  "absolute_expiry_time": {
                    "type": "object",
                    "description": "AMQP absolute-expiry-time",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP absolute-expiry-time value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP absolute-expiry-time value template"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP absolute-expiry-time required"
                      }
                    }
                  },
                  "group_id": {
                    "type": "object",
                    "description": "AMQP group-id",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP group-id value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP group-id value template"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP group-id required"
                      }
                    }
                  },
                  "group_sequence": {
                    "type": "object",
                    "description": "AMQP group-sequence",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP group-sequence value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP group-sequence value template"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP group-sequence required"
                      }
                    }
                  },
                  "reply_to_group_id": {
                    "type": "object",
                    "description": "AMQP reply-to-group-id",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP reply-to-group-id value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP reply-to-group-id value template"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP reply-to-group-id required"
                      }
                    }
                  }
                }
              },
              "application_properties": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "description": "The application property type"
                    },
                    "value": {
                      "type": "string",
                      "description": "The application property value template"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "The application property required"
                    }
                  }
                }
              },
              "message_annotations": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "description": "The message annotation type"
                    },
                    "value": {
                      "type": "string",
                      "description": "The message annotation value"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "Whether the message annotation is required"
                    }
                  }
                }
              },
              "delivery_annotations": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "description": "The annotation type"
                    },
                    "value": {
                      "type": "string",
                      "description": "The delivery annotation value"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "Whether the annotation is required"
                    }
                  }
                }
              },
              "header": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "description": "AMQP header type"
                    },
                    "value": {
                      "type": "string",
                      "description": "AMQP header value"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "AMQP header required"
                    }
                  }
                }
              },
              "footer": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "description": "AMQP footer type"
                    },
                    "value": {
                      "type": "string",
                      "description": "AMQP footer value"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "AMQP footer required"
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "protocol"
        ]
      },
      "protocol_MQTT_3_1_1": {
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Protocol identifier. This attribute MUST be the same as the 'protocol' attribute of the definition group, but is not automatically inherited because definitions may be cross-referenced across groups",
            "enum": [
              "MQTT/3.1.1"
            ]
          },
          "protocoloptions": {
            "type": "object",
            "description": "MQTT message metadata constraints",
            "properties": {
              "qos": {
                "type": "object",
                "description": "MQTT qos",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "MQTT qos value template"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "MQTT qos value required"
                  }
                }
              },
              "retain": {
                "type": "object",
                "description": "MQTT retain",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "value": {
                    "type": "boolean",
                    "description": "MQTT retain value template"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "MQTT retain value required"
                  }
                }
              },
              "topic_name": {
                "type": "object",
                "description": "MQTT topic-name",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "MQTT topic-name value template"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "MQTT topic-name value required"
                  }
                }
              }
            }
          }
        },
        "required": [
          "protocol"
        ]
      },
      "protocol_MQTT_5_0": {
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Protocol identifier. This attribute MUST be the same as the 'protocol' attribute of the definition group, but is not automatically inherited because definitions may be cross-referenced across groups",
            "enum": [
              "MQTT/5.0"
            ]
          },
          "protocoloptions": {
            "type": "object",
            "description": "MQTT message metadata constraints",
            "properties": {
              "qos": {
                "type": "object",
                "description": "MQTT qos",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "value": {
                    "type": "integer",
                    "description": "MQTT qos value template"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "MQTT qos value required"
                  }
                }
              },
              "retain": {
                "type": "object",
                "description": "MQTT retain",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "value": {
                    "type": "boolean",
                    "description": "MQTT retain value template"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "MQTT retain value required"
                  }
                }
              },
              "topic_name": {
                "type": "object",
                "description": "MQTT topic-name",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "MQTT topic-name value template"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "MQTT topic-name value required"
                  }
                }
              },
              "message_expiry_interval": {
                "type": "object",
                "description": "MQTT message-expiry-interval",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "value": {
                    "type": "integer",
                    "description": "MQTT message-expiry-interval value template"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "MQTT message-expiry-interval value required"
                  }
                }
              },
              "response_topic": {
                "type": "object",
                "description": "MQTT response-topic",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "MQTT response-topic value template"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "MQTT response-topic value required"
                  }
                }
              },
              "correlation_data": {
                "type": "object",
                "description": "MQTT correlation-data",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "MQTT correlation-data value template"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "MQTT correlation-data value required"
                  }
                }
              },
              "content_type": {
                "type": "object",
                "description": "MQTT content-type",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "MQTT content-type value template"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "MQTT content-type value required"
                  }
                }
              },
              "user_properties": {
                "type": "array",
                "description": "MQTT user-properties",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "MQTT user-property name"
                    },
                    "description": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "description": "MQTT user-property value"
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "protocol"
        ]
      },
      "protocol_KAFKA": {
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Protocol identifier. This attribute MUST be the same as the 'protocol' attribute of the definition group, but is not automatically inherited because definitions may be cross-referenced across groups",
            "enum": [
              "KAFKA"
            ]
          },
          "protocoloptions": {
            "type": "object",
            "description": "The Apache Kafka message metadata constraints",
            "properties": {
              "topic": {
                "type": "string",
                "description": "The Apache Kafka topic"
              },
              "partition": {
                "type": "integer",
                "description": "The Apache Kafka partition"
              },
              "key": {
                "type": "string",
                "description": "The Apache Kafka key"
              },
              "headers": {
                "type": "object",
                "description": "The Apache Kafka headers",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The Apache Kafka header name"
                    },
                    "description": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "description": "The Apache Kafka header value"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "The Apache Kafka header required"
                    }
                  }
                }
              },
              "timestamp": {
                "type": "integer",
                "description": "The Apache Kafka timestamp"
              }
            }
          }
        },
        "required": [
          "protocol"
        ]
      },
      "protocol_HTTP": {
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Protocol identifier. This attribute MUST be the same as the 'protocol' attribute of the definition group, but is not automatically inherited because definitions may be cross-referenced across groups",
            "enum": [
              "HTTP"
            ]
          },
          "protocoloptions": {
            "type": "object",
            "description": "The HTTP message metadata constraints",
            "properties": {
              "headers": {
                "type": "array",
                "description": "The HTTP headers",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The HTTP header name"
                    },
                    "description": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "description": "The HTTP header value"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "The HTTP header required"
                    }
                  }
                }
              },
              "query": {
                "type": "array",
                "description": "The HTTP query parameters",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The HTTP query parameter"
                    },
                    "description": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "description": "The HTTP query parameter value"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "The HTTP query parameter required"
                    }
                  }
                }
              },
              "path": {
                "type": "string",
                "description": "The HTTP path as a uri template"
              },
              "method": {
                "type": "string",
                "description": "The HTTP method"
              }
            }
          }
        },
        "required": [
          "protocol"
        ]
      },
      "message": {
        "type": "object",
        "properties": {
          "messageid": {
            "type": "string",
            "description": "ID of the message object"
          },
          "name": {
            "type": "string",
            "description": "Name of the object"
          },
          "epoch": {
            "type": "integer",
            "description": "Epoch time of the object creation"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "description": "URL of the object"
          },
          "xid": {
            "type": "string",
            "format": "uri",
            "description": "Relative URL of the object"
          },
          "description": {
            "type": "string",
            "description": "Description of the object"
          },
          "documentation": {
            "type": "string",
            "format": "uri",
            "description": "URI of the documentation of the object"
          },
          "labels": {
            "type": "object",
            "description": "Labels for the object"
          },
          "createdat": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the object creation"
          },
          "modifiedat": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the object modification"
          },
          "basemessageurl": {
            "type": "string",
            "format": "uri",
            "description": "Reference to a base definition for this definition, either via a (relative) URL or a fragment identifier. The base definition is overridden by this definition. If not present, this definition does not override any base definition"
          },
          "dataschemaformat": {
            "type": "string",
            "description": "The schema format applicable to the message payload, equivalent to the 'format' attribute of the schema registry"
          },
          "dataschema": {
            "type": "object",
            "description": "The inline schema for the message payload, equivalent to the 'schema' attribute of the schema registry"
          },
          "dataschemauri": {
            "type": "string",
            "format": "uri",
            "description": "The URI of the schema for the message payload, equivalent to the 'schemaurl' attribute of the schema registry"
          },
          "datacontenttype": {
            "type": "string",
            "description": "The content type for the message payload"
          }
        },
        "discriminator": {
          "propertyName": "protocol",
          "mapping": {
            "None": "#/components/schemas/protocol_None",
            "AMQP/1.0": "#/components/schemas/protocol_AMQP_1_0",
            "MQTT/3.1.1": "#/components/schemas/protocol_MQTT_3_1_1",
            "MQTT/5.0": "#/components/schemas/protocol_MQTT_5_0",
            "KAFKA": "#/components/schemas/protocol_KAFKA",
            "HTTP": "#/components/schemas/protocol_HTTP"
          }
        }
      },
      "messagegroup": {
        "type": "object",
        "properties": {
          "messagegroupid": {
            "type": "string",
            "description": "ID of the messagegroup object"
          },
          "name": {
            "type": "string",
            "description": "Name of the object"
          },
          "epoch": {
            "type": "integer",
            "description": "Epoch time of the object creation"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "description": "URL of the object"
          },
          "xid": {
            "type": "string",
            "format": "uri",
            "description": "Relative URL of the object"
          },
          "description": {
            "type": "string",
            "description": "Description of the object"
          },
          "documentation": {
            "type": "string",
            "format": "uri",
            "description": "URI of the documentation of the object"
          },
          "labels": {
            "type": "object",
            "description": "Labels for the object"
          },
          "createdat": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the object creation"
          },
          "modifiedat": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the object modification"
          },
          "envelope": {
            "type": "string",
            "description": "Envelope format identifier that defines the common metadata information for the message. All definitions in this group share this envelope format. Mixed-envelope-format groups are not permitted"
          },
          "protocol": {
            "type": "string",
            "description": "Protocol identifier that defines the transport message protocol. All definitions in this group share this protocol type. Mixed-protocol groups are not permitted"
          },
          "messages": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/message"
            }
          }
        }
      }
    }
  }
}